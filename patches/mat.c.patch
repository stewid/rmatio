*** mat.c.orig	2019-11-16 17:53:29.871309124 +0100
--- mat.c	2019-11-16 17:53:29.896309048 +0100
***************
*** 28,54 ****
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   */
  
! /* FIXME: Implement Unicode support */
! #include "safe-math.h"
! #include <stdlib.h>
! #include <string.h>
! #include <stdio.h>
! #include <math.h>
! #include <time.h>
! #if HAVE_INTTYPES_H
! #   define __STDC_FORMAT_MACROS
! #   include <inttypes.h>
! #endif
! #if defined(_WIN64) || defined(_WIN32)
! #   include <io.h>
! #   define mktemp _mktemp
! #endif
! #if defined(_MSC_VER) || defined(__MINGW32__)
! #   define SIZE_T_FMTSTR "Iu"
! #   define strdup _strdup
! #else
! #   define SIZE_T_FMTSTR "zu"
! #endif
  #include "matio_private.h"
  #include "mat5.h"
  #include "mat4.h"
--- 28,46 ----
   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   */
  
! /*
!  * Changes in the R package rmatio:
!  *
!  * - The io routines have been adopted to use R printing and error
!  *   routines.  See the R manual Writing R Extensions
!  *
!  */
! 
! /* Stefan Widgren 2014-01-05: Include only header files neccessary to
!  * build the rmatio package */
! 
! #include <Rdefines.h>
! #include "config.h"
  #include "matio_private.h"
  #include "mat5.h"
  #include "mat4.h"
***************
*** 78,139 ****
      return;
  }
  
! static void
! Mat_PrintNumber(enum matio_types type, void *data)
  {
!     switch ( type ) {
          case MAT_T_DOUBLE:
!             printf("%g",*(double*)data);
!             break;
          case MAT_T_SINGLE:
!             printf("%g",*(float*)data);
!             break;
  #ifdef HAVE_MAT_INT64_T
          case MAT_T_INT64:
! #if HAVE_INTTYPES_H
!             printf("%" PRIi64,*(mat_int64_t*)data);
! #elif defined(_MSC_VER) && _MSC_VER >= 1200
!             printf("%I64i",*(mat_int64_t*)data);
! #elif defined(HAVE_LONG_LONG_INT)
!             printf("%lld",(long long)(*(mat_int64_t*)data));
! #else
!             printf("%ld",(long)(*(mat_int64_t*)data));
! #endif
!             break;
  #endif
  #ifdef HAVE_MAT_UINT64_T
          case MAT_T_UINT64:
! #if HAVE_INTTYPES_H
!             printf("%" PRIu64,*(mat_uint64_t*)data);
! #elif defined(_MSC_VER) && _MSC_VER >= 1200
!             printf("%I64u",*(mat_uint64_t*)data);
! #elif defined(HAVE_UNSIGNED_LONG_LONG_INT)
!             printf("%llu",(unsigned long long)(*(mat_uint64_t*)data));
! #else
!             printf("%lu",(unsigned long)(*(mat_uint64_t*)data));
! #endif
!             break;
  #endif
          case MAT_T_INT32:
!             printf("%d",*(mat_int32_t*)data);
!             break;
          case MAT_T_UINT32:
!             printf("%u",*(mat_uint32_t*)data);
!             break;
          case MAT_T_INT16:
!             printf("%hd",*(mat_int16_t*)data);
!             break;
          case MAT_T_UINT16:
!             printf("%hu",*(mat_uint16_t*)data);
!             break;
          case MAT_T_INT8:
!             printf("%hhd",*(mat_int8_t*)data);
!             break;
          case MAT_T_UINT8:
!             printf("%hhu",*(mat_uint8_t*)data);
!             break;
          default:
!             break;
      }
  }
  
--- 70,119 ----
      return;
  }
  
! /* Stefan Widgren 2014-01-04: Mat_SizeOf moved from io.c */
! 
! /** @brief Calculate the size of MAT data types
!  *
!  * @ingroup mat_util
!  * @param data_type Data type enumeration
!  * @return size of the data type in bytes
!  */
! size_t
! Mat_SizeOf(enum matio_types data_type)
  {
!     switch (data_type) {
          case MAT_T_DOUBLE:
!             return sizeof(double);
          case MAT_T_SINGLE:
!             return sizeof(float);
  #ifdef HAVE_MAT_INT64_T
          case MAT_T_INT64:
!             return sizeof(mat_int64_t);
  #endif
  #ifdef HAVE_MAT_UINT64_T
          case MAT_T_UINT64:
!             return sizeof(mat_uint64_t);
  #endif
          case MAT_T_INT32:
!             return sizeof(mat_int32_t);
          case MAT_T_UINT32:
!             return sizeof(mat_uint32_t);
          case MAT_T_INT16:
!             return sizeof(mat_int16_t);
          case MAT_T_UINT16:
!             return sizeof(mat_uint16_t);
          case MAT_T_INT8:
!             return sizeof(mat_int8_t);
          case MAT_T_UINT8:
!             return sizeof(mat_uint8_t);
!         case MAT_T_UTF8:
!             return 1;
!         case MAT_T_UTF16:
!             return 2;
!         case MAT_T_UTF32:
!             return 4;
          default:
!             return 0;
      }
  }
  
***************
*** 1038,1212 ****
      return matvar;
  }
  
- /** @brief Copies a file
-  *
-  * @param src source file path
-  * @param dst destination file path
-  * @retval 0 on success
-  */
- static int
- mat_copy(const char* src, const char* dst)
- {
-     size_t len;
-     char buf[BUFSIZ] = {'\0'};
-     FILE* in;
-     FILE* out;
- 
-     in = fopen(src, "rb");
-     if ( in == NULL ) {
-         Mat_Critical("Cannot open file \"%s\" for reading.", src);
-         return -1;
-     }
- 
-     out = fopen(dst, "wb");
-     if ( out == NULL ) {
-         fclose(in);
-         Mat_Critical("Cannot open file \"%s\" for writing.", dst);
-         return -1;
-     }
- 
-     while ( (len = fread(buf, sizeof(char), BUFSIZ, in)) > 0 ) {
-         if ( len != fwrite(buf, sizeof(char), len, out) ) {
-             fclose(in);
-             fclose(out);
-             Mat_Critical("Error writing to file \"%s\".", dst);
-             return -1;
-         }
-     }
-     fclose(in);
-     fclose(out);
-     return 0;
- }
- 
- /** @brief Deletes a variable from a file
-  *
-  * @ingroup MAT
-  * @param mat Pointer to the mat_t file structure
-  * @param name Name of the variable to delete
-  * @returns 0 on success
-  */
- int
- Mat_VarDelete(mat_t *mat, const char *name)
- {
-     int   err = 1;
-     char *tmp_name;
-     char temp[7] = "XXXXXX";
- 
-     if ( NULL == mat || NULL == name )
-         return err;
- 
-     if ( (tmp_name = mktemp(temp)) != NULL ) {
-         enum mat_ft mat_file_ver;
-         mat_t *tmp;
- 
-         switch ( mat->version ) {
-             case 0x0100:
-                 mat_file_ver = MAT_FT_MAT5;
-                 break;
-             case 0x0200:
-                 mat_file_ver = MAT_FT_MAT73;
-                 break;
-             case 0x0010:
-                 mat_file_ver = MAT_FT_MAT4;
-                 break;
-             default:
-                 mat_file_ver = MAT_FT_DEFAULT;
-                 break;
-         }
- 
-         tmp = Mat_CreateVer(tmp_name,mat->header,mat_file_ver);
-         if ( tmp != NULL ) {
-             matvar_t *matvar;
-             char **dir;
-             size_t n;
- 
-             Mat_Rewind(mat);
-             while ( NULL != (matvar = Mat_VarReadNext(mat)) ) {
-                 if ( 0 != strcmp(matvar->name,name) )
-                     Mat_VarWrite(tmp,matvar,matvar->compression);
-                 else
-                     err = 0;
-                 Mat_VarFree(matvar);
-             }
-             dir = tmp->dir; /* Keep directory for later assignment */
-             tmp->dir = NULL;
-             n = tmp->num_datasets;
-             Mat_Close(tmp);
- 
-             if ( 0 == err ) {
-                 char *new_name = strdup_printf("%s",mat->filename);
- #if defined(MAT73) && MAT73
-                 if ( mat_file_ver == MAT_FT_MAT73 ) {
-                     if ( mat->refs_id > -1 )
-                         H5Gclose(mat->refs_id);
-                     H5Fclose(*(hid_t*)mat->fp);
-                     free(mat->fp);
-                     mat->fp = NULL;
-                 }
- #endif
-                 if ( mat->fp != NULL ) {
-                     fclose((FILE*)mat->fp);
-                     mat->fp = NULL;
-                 }
- 
-                 if ( (err = mat_copy(tmp_name,new_name)) == -1 ) {
-                     if ( NULL != dir ) {
-                         size_t i;
-                         for ( i = 0; i < n; i++ ) {
-                             if ( dir[i] )
-                                 free(dir[i]);
-                         }
-                         free(dir);
-                     }
-                     Mat_Critical("Cannot copy file from \"%s\" to \"%s\".",
-                         tmp_name, new_name);
-                 } else if ( (err = remove(tmp_name)) == -1 ) {
-                     if ( NULL != dir ) {
-                         size_t i;
-                         for ( i = 0; i < n; i++ ) {
-                             if ( dir[i] )
-                                 free(dir[i]);
-                         }
-                         free(dir);
-                     }
-                     Mat_Critical("Cannot remove file \"%s\".",tmp_name);
-                 } else {
-                     tmp = Mat_Open(new_name,mat->mode);
-                     if ( NULL != tmp ) {
-                         if ( mat->header )
-                             free(mat->header);
-                         if ( mat->subsys_offset )
-                             free(mat->subsys_offset);
-                         if ( mat->filename )
-                             free(mat->filename);
-                         if ( mat->dir ) {
-                             size_t i;
-                             for ( i = 0; i < mat->num_datasets; i++ ) {
-                                 if ( mat->dir[i] )
-                                     free(mat->dir[i]);
-                             }
-                             free(mat->dir);
-                         }
-                         memcpy(mat,tmp,sizeof(mat_t));
-                         free(tmp);
-                         mat->num_datasets = n;
-                         mat->dir = dir;
-                     } else {
-                         Mat_Critical("Cannot open file \"%s\".",new_name);
-                     }
-                 }
-                 free(new_name);
-             } else if ( (err = remove(tmp_name)) == -1 ) {
-                 Mat_Critical("Cannot remove file \"%s\".",tmp_name);
-             }
-         }
-     } else {
-         Mat_Critical("Cannot create a unique file name.");
-     }
- 
-     return err;
- }
- 
  /** @brief Duplicates a matvar_t structure
   *
   * Provides a clean function for duplicating a matvar_t structure.
--- 1018,1023 ----
***************
*** 1840,1845 ****
--- 1651,1657 ----
      return bytes;
  }
  
+ #if 0
  /** @brief Prints the variable information
   *
   * Prints to stdout the values of the @ref matvar_t structure
***************
*** 2086,2091 ****
--- 1898,1904 ----
  
      return;
  }
+ #endif
  
  /** @brief Reads MAT variable data from a file
   *
